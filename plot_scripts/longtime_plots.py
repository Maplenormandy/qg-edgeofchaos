# -*- coding: utf-8 -*-
"""
Created on Wed Sep 29 10:35:45 2021

@author: maple
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import scipy.interpolate
from numpy.polynomial import Polynomial

font = {'family' : 'serif',
        'size'   : 6}

mpl.rc('font', **font)


# %% Generated by longtime_eigencomponent_check.py on the courant cluster

data = np.load('../dns_input/longtime_amps_fd_smooth.npz')
eigampslt = data['amps']
qbars = data['qbars']

ampfile = np.load('../dns_input/amps_fd_smooth.npz')
eigamps = ampfile['amps']
qbar = ampfile['qbar']

lyapdata = np.load('../lyapunovs/lyaps_multicontour_longtimedependent_allmodes.npz')

# %% 

tab20b = mpl.cm.get_cmap('tab20b')
tab20c = mpl.cm.get_cmap('tab20c')

fig = plt.figure(figsize=(3.375, 3.375*0.8), dpi=300)
gs = fig.add_gridspec(2, 2)

ax = [fig.add_subplot(gs[0,0]), fig.add_subplot(gs[0,1]), fig.add_subplot(gs[1,:])]

#t = np.arange(2400.0, 3600.1, 100.0)

t = np.linspace(0, 64, num=257, endpoint=True)
x = np.linspace(-np.pi, np.pi, num=2048, endpoint=False)

for j in range(13):
    ax[0].plot(x, qbars[j,:], c=tab20c(3.5/20.0))
    
ax[0].plot(x, qbar, c=tab20c(0.5/20.0))

# Here we have the 9 most energetic eigenmodes
eignums = np.array([5, 3, 1, 4, 2, 3, 4, 6, 0], dtype=np.int32)
kys =     np.array([1, 1, 3, 2, 3, 2, 1, 1, 2], dtype=np.int32)

setphase0 = False
phase0 = np.zeros(len(eignums))
phase0all = 0.0

for j in range(len(eignums)):
    ky = kys[j]
    eig = eignums[j]
    
    amp = eigamps[ky-1,:,eig]
    ampj = eigampslt[ky-1,:,eig]
    
    ampavg = np.sqrt(np.average(np.abs(amp)**2)) / 1024
    ampstd = np.sqrt(np.std(np.abs(amp)**2)) / 1024
    
    #quantile = 0.158655
    quantile = 0.025
    
    amplow = np.sqrt(np.quantile(np.abs(amp)**2,quantile)) / 1024
    ampmed = np.sqrt(np.quantile(np.abs(amp)**2,0.5)) / 1024
    amphig = np.sqrt(np.quantile(np.abs(amp)**2,1.0-quantile)) / 1024
    
    fit = Polynomial.fit(t,np.unwrap(np.angle(amp)), deg=1).convert()
    expfreqs = fit.coef[1]
    expphases = fit.coef[0]
    
    phasedevs = np.unwrap(np.angle(amp)) - expfreqs*t - expphases
    
    phasej = np.angle(ampj)
    if not setphase0:
        phase0 = -phasej
        phase0all = expphases
        setphase0 = True
    
    
    ax[1].scatter(np.ones(len(ampj))*(j+1), np.abs(ampj)/1024, color=tab20c(3.5/20.0), marker='_')
    ax[1].errorbar([j+1], [ampavg], yerr=np.array([[ampavg-amplow, amphig-ampavg]]).T, color=tab20c(0.5/20.0), marker='_')
    #ax[1].scatter([j], [ampavg], color=tab20c(4.5/20.0), marker='_')
    
    
    #ax[1].scatter(np.real(ampj)/1024, np.imag(ampj)/1024, color=tab20c(3.5/20.0))
    #ax[1].scatter([ampavg*np.cos(expphases)], [ampavg*np.sin(expphases)], color=tab20c(0.5/20.0))
    
    #print(expphases)
    #print(np.angle(amp[0]))
    
    #ax[1].scatter(np.ones(len(ampj))*j, np.angle(ampj*np.exp(1j*phase0)), color=tab20c(3.5/20.0), marker='_')
    #ax[1].errorbar([j], [expphases], yerr=np.array([[expphases-np.quantile(phasedevs, quantile), np.quantile(phasedevs, 1-quantile)-expphases]]).T, color=tab20c(0.5/20.0))
    #ax[1].scatter([j], [expphases-phase0all], color=tab20c(0.5/20.0))
    #ax[1].errorbar([j], [ampavg], yerr=[ampstd], color=tab20c(0.5/20.0))
    
ax[0].text(-0.1, 1.02, r'$\bar{q}$', transform=ax[0].transAxes) 
ax[0].set_xlabel(r'$y$') 
ax[0].set_title('Zonally-averaged PV')

#ax[1].set_xlabel('Eigenmode Index')
#ax[1].xaxis.set_major_locator(plt.MultipleLocator(1))
#ax[1].set_ylabel(r'[arb. units]')
ax[1].set_title('Eigenmode Amplitude')
ax[1].set_xticks([1,3,5,7,9])
ax[1].set_xlabel('Eigenmode number (energy rank)')

longt = np.arange(2400.0, 3600.1, 100.0)
ax[2].plot(longt, lyapdata['lyaps'], marker='.')
ax[2].set_title('Lyapunov exponent time evolution')
ax[2].text(-0.05, 1.02, r'$\bar{\lambda}$', transform=ax[2].transAxes) 
ax[2].set_xlabel('time')
ax[2].axhline(ls='--', c='k')

plt.suptitle(r'Data from snapshots over long time $\Delta t = 1200$')

plt.tight_layout(h_pad=1.6)
plt.tight_layout(h_pad=1.6)

plt.savefig('longtime.pdf', dpi=200)
plt.savefig('longtime.png', dpi=300)